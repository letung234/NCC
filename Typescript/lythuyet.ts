// ============================================
// üî† Types trong TypeScript - Gi·∫£i th√≠ch & V√≠ d·ª•
// ============================================

/**
 * 1. Ki·ªÉu c∆° b·∫£n (Primitive Types)
 */
let username: string = "Alice";
let age: number = 25;
let isOnline: boolean = true;
let nothing: null = null;
let notSet: undefined = undefined;

/**
 * 2. Array - M·∫£ng
 */
let numbers: number[] = [1, 2, 3];
let names: Array<string> = ["Alice", "Bob"];

/**
 * 3. Tuple - B·ªô gi√° tr·ªã c·ªë ƒë·ªãnh ki·ªÉu & ƒë·ªô d√†i
 */
let coordinates: [number, number] = [10, 20];

/**
 * 4. Enum - Li·ªát k√™ c√°c h·∫±ng s·ªë
 */
enum Direction {
  Up,
  Down,
  Left,
  Right,
}
let go: Direction = Direction.Up; // = 0

/**
 * 5. Any - B·ªè ki·ªÉm tra ki·ªÉu (tr√°nh l·∫°m d·ª•ng)
 */
let randomValue: any = 10;
randomValue = "string";
randomValue = true;

/**
 * 6. Unknown - Gi·ªëng any nh∆∞ng an to√†n h∆°n
 */
let maybeValue: unknown = "Hello";
if (typeof maybeValue === "string") {
  console.log(maybeValue.toUpperCase());
}

/**
 * 7. Union Type - C√≥ th·ªÉ nhi·ªÅu ki·ªÉu
 */
let id: number | string;
id = 123;
id = "ABC123";

/**
 * 8. Literal Type - Gi·ªõi h·∫°n gi√° tr·ªã c·ª• th·ªÉ
 */
let direction: "left" | "right";
direction = "left";
// direction = "up"; // ‚ùå L·ªói v√¨ kh√¥ng thu·ªôc literal type

/**
 * 9. Type Alias - T·∫°o t√™n cho ki·ªÉu d·ªØ li·ªáu
 */
type UserID = number | string;
let userId: UserID = "abc123";

/**
 * 10. Interface - ƒê·ªãnh nghƒ©a c·∫•u tr√∫c object
 */
interface User {
  id: number;
  name: string;
  email?: string; // Thu·ªôc t√≠nh t√πy ch·ªçn
}

const user: User = {
  id: 1,
  name: "Alice",
};

/**
 * 11. Intersection Type - K·∫øt h·ª£p nhi·ªÅu ki·ªÉu
 */
type Admin = {
  role: string;
};
type AdminUser = User & Admin;

const admin: AdminUser = {
  id: 2,
  name: "Bob",
  role: "Manager",
};

/**
 * 12. Function Types - Ki·ªÉu cho h√†m
 */
let add: (a: number, b: number) => number = (a, b) => a + b;

/**
 * 13. Type Assertions - √âp ki·ªÉu
 */
let someValue: unknown = "Hello TS";
let strLength: number = (someValue as string).length;

/**
 * 14. Nullable Types - null ho·∫∑c undefined
 */
let input: string | null = null;

/**
 * 15. Optional Properties - Thu·ªôc t√≠nh c√≥ th·ªÉ c√≥
 */
interface Product {
  name: string;
  price?: number;
}

const pen: Product = { name: "Pen" };

/**
 * 16. Readonly - Kh√¥ng th·ªÉ thay ƒë·ªïi sau khi g√°n
 */
interface Config {
  readonly host: string;
}
const cfg: Config = { host: "localhost" };
// cfg.host = "127.0.0.1"; // ‚ùå L·ªói v√¨ readonly

/**
 * 17. typeof - L·∫•y ki·ªÉu c·ªßa bi·∫øn kh√°c
 */
let value = 123;
let anotherValue: typeof value; // => number

/**
 * 18. keyof - L·∫•y key c·ªßa m·ªôt object type
 */
type Keys = keyof User; // "id" | "name" | "email"

/**
 * 19. ReturnType - L·∫•y ki·ªÉu tr·∫£ v·ªÅ c·ªßa h√†m
 */
function multiply(x: number, y: number) {
  return x * y;
}
type MultiplyResult = ReturnType<typeof multiply>; // number


/**
 * ===================================================
 * S·ª± kh√°c bi·ªát gi·ªØa `interface` v√† `type` trong TypeScript
 * ===================================================
 */

/**
 * 1. Kh·∫£ nƒÉng m·ªü r·ªông (Extending)
 * - `interface` c√≥ th·ªÉ ƒë∆∞·ª£c m·ªü r·ªông b·∫±ng c√°ch s·ª≠ d·ª•ng t·ª´ kh√≥a `extends`.
 * - `type` c√≥ th·ªÉ m·ªü r·ªông th√¥ng qua ph√©p to√°n `&` (Intersection Types).
 */

// Interface m·ªü r·ªông m·ªôt interface kh√°c:
interface Animal {
  name: string;
}

interface Dog extends Animal {
  breed: string;
}

const dog: Dog = {
  name: "Rex",
  breed: "Labrador"
};

// Type m·ªü r·ªông m·ªôt type kh√°c:
type AnimalType = {
  name: string;
};

type DogType = AnimalType & {
  breed: string;
};

const dogType: DogType = {
  name: "Rex",
  breed: "Labrador"
};

/**
 * 2. ƒê·ªãnh nghƒ©a c√°c ki·ªÉu d·ªØ li·ªáu ph·ª©c t·∫°p
 * - `interface` ch·ªß y·∫øu d√πng ƒë·ªÉ ƒë·ªãnh nghƒ©a c·∫•u tr√∫c c·ªßa ƒë·ªëi t∆∞·ª£ng ho·∫∑c l·ªõp.
 * - `type` c√≥ th·ªÉ ƒë·ªãnh nghƒ©a nhi·ªÅu ki·ªÉu d·ªØ li·ªáu ph·ª©c t·∫°p nh∆∞ union types, intersection types, mapped types, v.v.
 */

// Interface d√πng ƒë·ªÉ ƒë·ªãnh nghƒ©a ƒë·ªëi t∆∞·ª£ng:
interface Person {
  name: string;
  age: number;
}

// Type c√≥ th·ªÉ s·ª≠ d·ª•ng cho nhi·ªÅu ki·ªÉu kh√°c nhau:
type ID = string | number; // Union type

type Employee = Person & { jobTitle: string }; // Intersection type

type NumberArray = number[]; // M·∫£ng

/**
 * 3. T√°i ƒë·ªãnh nghƒ©a (Declaration Merging)
 * - `interface` c√≥ kh·∫£ nƒÉng t√°i ƒë·ªãnh nghƒ©a (declaration merging). B·∫°n c√≥ th·ªÉ khai b√°o m·ªôt interface nhi·ªÅu l·∫ßn v√† TypeScript s·∫Ω h·ª£p nh·∫•t ch√∫ng.
 * - `type` kh√¥ng c√≥ kh·∫£ nƒÉng n√†y. N·∫øu khai b√°o l·∫°i m·ªôt `type` v·ªõi t√™n gi·ªëng nhau, TypeScript s·∫Ω b√°o l·ªói.
 */

// Declaration Merging v·ªõi Interface:
interface PersonInterface {
  name: string;
}

interface PersonInterface {
  age: number;
}

const person: PersonInterface = {
  name: "Alice",
  age: 30
};

// Type kh√¥ng c√≥ Declaration Merging:
type PersonType = {
  name: string;
};

// S·∫Ω b√°o l·ªói khi khai b√°o l·∫°i:
type PersonType = {
  age: number;
}; // Error: Duplicate identifier 'PersonType'.

/**
 * 4. Kh·∫£ nƒÉng s·ª≠ d·ª•ng trong c√°c tr∆∞·ªùng h·ª£p ph·ª©c t·∫°p
 * - `type` c√≥ th·ªÉ ƒë·ªãnh nghƒ©a c√°c ki·ªÉu d·ªØ li·ªáu ph·ª©c t·∫°p h∆°n nh∆∞ mapped types, conditional types, v.v.
 * - `interface` ch·ªß y·∫øu ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ƒë·ªãnh nghƒ©a ƒë·ªëi t∆∞·ª£ng v√† l·ªõp.
 */

// Mapped Types v·ªõi Type:
type ReadOnly<T> = {
  readonly [K in keyof T]: T[K];
};

type PersonMapped = {
  name: string;
  age: number;
};

const readOnlyPerson: ReadOnly<PersonMapped> = {
  name: "Alice",
  age: 30
};

// Kh√¥ng th·ªÉ thay ƒë·ªïi gi√° tr·ªã v√¨ n√≥ ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u readonly:
readOnlyPerson.name = "Bob"; // Error: cannot assign to 'name' because it is a read-only property.

/**
 * 5. S·ª± kh√°c bi·ªát t·ªïng th·ªÉ
 * - `interface` d·ªÖ m·ªü r·ªông, th∆∞·ªùng d√πng khi b·∫°n mu·ªën ƒë·ªãnh nghƒ©a c·∫•u tr√∫c ƒë·ªëi t∆∞·ª£ng ho·∫∑c khi mu·ªën s·ª≠ d·ª•ng v·ªõi `extends` v√† `implements`.
 * - `type` linh ho·∫°t h∆°n, c√≥ th·ªÉ ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ ƒë·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu ph·ª©c t·∫°p v√† k·∫øt h·ª£p nhi·ªÅu ki·ªÉu l·∫°i v·ªõi nhau.
 */

/**
 * So s√°nh chi ti·∫øt gi·ªØa `interface` v√† `type`
 * ===================================================
 * | ƒê·∫∑c ƒëi·ªÉm                | `interface`                                     | `type`                                   |
 * |-------------------------|-------------------------------------------------|------------------------------------------|
 * | **Kh·∫£ nƒÉng m·ªü r·ªông**     | C√≥ th·ªÉ m·ªü r·ªông (extends, implements)            | M·ªü r·ªông b·∫±ng `&` (intersection types)    |
 * | **Kh·∫£ nƒÉng t√°i ƒë·ªãnh nghƒ©a**| H·ªó tr·ª£ declaration merging                     | Kh√¥ng h·ªó tr·ª£ declaration merging         |
 * | **S·ª≠ d·ª•ng linh ho·∫°t**    | Th√≠ch h·ª£p cho ƒë·ªëi t∆∞·ª£ng, l·ªõp                    | Ph√π h·ª£p v·ªõi t·∫•t c·∫£ c√°c ki·ªÉu d·ªØ li·ªáu (h√†m, union, m·∫£ng, ...) |
 * | **D·ªÖ d√†ng m·ªü r·ªông**      | D·ªÖ d√†ng m·ªü r·ªông v√† t√°i s·ª≠ d·ª•ng trong class v√† interface kh√°c | Th∆∞·ªùng kh√¥ng d√πng ƒë·ªÉ m·ªü r·ªông nh∆∞ interface |
 * | **Kh·∫£ nƒÉng bi·ªÉu di·ªÖn ki·ªÉu ph·ª©c t·∫°p**| Kh√¥ng linh ho·∫°t nh∆∞ `type`                 | Linh ho·∫°t, c√≥ th·ªÉ t·∫°o ki·ªÉu d·ªØ li·ªáu ph·ª©c t·∫°p nh∆∞ mapped types, conditional types |
 */

/**
 * Khi n√†o d√πng `type` ho·∫∑c `interface`?
 * ===================================================
 * - D√πng `interface` khi b·∫°n c·∫ßn ƒë·ªãnh nghƒ©a c·∫•u tr√∫c c·ªßa ƒë·ªëi t∆∞·ª£ng ho·∫∑c l·ªõp.
 * - D√πng `type` khi b·∫°n c·∫ßn ƒë·ªãnh nghƒ©a ki·ªÉu d·ªØ li·ªáu ph·ª©c t·∫°p, k·∫øt h·ª£p c√°c ki·ªÉu ho·∫∑c t·∫°o c√°c ki·ªÉu d·ªØ li·ªáu kh√¥ng ph·∫£i ƒë·ªëi t∆∞·ª£ng.
 */



// 1. Bi·∫øn c·ª•c b·ªô v√† to√†n c·ª•c
let globalVar = "I am a global variable"; // Bi·∫øn to√†n c·ª•c

function testLocalVar() {
  let localVar = "I am a local variable"; // Bi·∫øn c·ª•c b·ªô
  console.log(localVar); // In ra: I am a local variable
}

testLocalVar();
// console.log(localVar); // L·ªói: localVar kh√¥ng x√°c ƒë·ªãnh

// 2. `let`, `const`, `var`
let number = 10; // Bi·∫øn c√≥ th·ªÉ thay ƒë·ªïi
const pi = 3.14; // Bi·∫øn h·∫±ng, kh√¥ng th·ªÉ thay ƒë·ªïi
// var oldWay = 20; // `var` kh√¥ng ƒë∆∞·ª£c khuy·∫øn kh√≠ch trong TypeScript

// S·ª≠ d·ª•ng `let` ƒë·ªÉ thay ƒë·ªïi gi√° tr·ªã
number = 15;
console.log(number); // In ra: 15

// S·ª≠ d·ª•ng `const` s·∫Ω g√¢y l·ªói n·∫øu g√°n l·∫°i gi√° tr·ªã
// pi = 3.14159; // L·ªói: Cannot assign to 'pi' because it is a constant.


// 3. Bi·∫øn l·ªõp v√† bi·∫øn ƒë·ªëi t∆∞·ª£ng trong class

class Rectangle {
  static totalCount = 0; // Bi·∫øn l·ªõp (static), chia s·∫ª gi·ªØa t·∫•t c·∫£ c√°c ƒë·ªëi t∆∞·ª£ng
  width: number;
  height: number;

  constructor(width: number, height: number) {
    this.width = width;
    this.height = height;
    Rectangle.totalCount++; // TƒÉng t·ªïng s·ªë h√¨nh ch·ªØ nh·∫≠t
  }

  // Ph∆∞∆°ng th·ª©c t√≠nh di·ªán t√≠ch cho h√¨nh ch·ªØ nh·∫≠t
  area(): number {
    return this.width * this.height;
  }

  // Ph∆∞∆°ng th·ª©c l·ªõp (class method)
  static getTotalCount(): number {
    return Rectangle.totalCount;
  }
}

const rect1 = new Rectangle(10, 5);
console.log(`Total Rectangles: ${Rectangle.getTotalCount()}`); // In ra: Total Rectangles: 1

const rect2 = new Rectangle(8, 4);
console.log(`Total Rectangles: ${Rectangle.getTotalCount()}`); // In ra: Total Rectangles: 2
// H√†m
// 1. H√†m c∆° b·∫£n
function greet(name: string): string {
  return `Hello, ${name}`;
}

// 2. H√†m v·ªõi tham s·ªë m·∫∑c ƒë·ªãnh
function greetWithDefault(name: string = "Guest"): string {
  return `Hello, ${name}`;
}

// 3. H√†m v√¥ s·ªë tham s·ªë (Rest Parameters)
function sum(...numbers: number[]): number {
  return numbers.reduce((acc, curr) => acc + curr, 0);
}

// 4. H√†m ·∫©n danh (Anonymous Function)
const multiply = function(a: number, b: number): number {
  return a * b;
};

// 5. H√†m m≈©i t√™n (Arrow Function)
const add = (a: number, b: number): number => a + b;

// 6. H√†m v·ªõi ki·ªÉu tr·∫£ v·ªÅ `void` (Kh√¥ng tr·∫£ v·ªÅ gi√° tr·ªã)
function logMessage(message: string): void {
  console.log(message);
}

// 7. H√†m v·ªõi ki·ªÉu tr·∫£ v·ªÅ `never` (Kh√¥ng bao gi·ªù tr·∫£ v·ªÅ) - khi n√©m ra l·ªói th√¨ k·∫øt th√∫c tr∆∞∆°ng tr√¨nh
function throwError(message: string): never {
  throw new Error(message);
}

// 8. H√†m l√† ph·∫ßn t·ª≠ trong ƒë·ªëi t∆∞·ª£ng
const calculator = {
  add(a: number, b: number): number {
    return a + b;
  },
  subtract(a: number, b: number): number {
    return a - b;
  }
};


// 10. H√†m tr·∫£ v·ªÅ h√†m (H√†m c√≥ ki·ªÉu tr·∫£ v·ªÅ l√† m·ªôt h√†m)
function multiplier(factor: number): (x: number) => number {
  return function(x: number): number {
    return x * factor;
  };
}

// 11. Ki·ªÉu h√†m trong TypeScript
let greeting: (name: string) => string;
greeting = (name: string) => `Hello, ${name}`;


// ===========================================
// # Scope ‚Äì Ph·∫°m vi
// ===========================================

// 1. Global Scope ‚Äì Ph·∫°m vi to√†n c·ª•c
let globalVar = "üåç I am global"; // C√≥ th·ªÉ truy c·∫≠p t·ª´ m·ªçi n∆°i

function showGlobal() {
  console.log(globalVar); // ‚úÖ Truy c·∫≠p bi·∫øn to√†n c·ª•c
}
showGlobal();

// 2. Block Scope ‚Äì Kh·ªëi m√£ (let, const)
{
  let blockVar = "üì¶ I am block-scoped";
  const blockConst = "üì¶ I am const in block";
  console.log(blockVar);     // ‚úÖ OK
  console.log(blockConst);   // ‚úÖ OK
}
// console.log(blockVar);    // ‚ùå Error: blockVar is not defined
// console.log(blockConst);  // ‚ùå Error: blockConst is not defined

// 3. Local Scope ‚Äì H√†m (var, function)
function testLocalScope() {
  var localVar = "üîí I am function-scoped";
  function localFunc() {
    console.log("üîß Inner function");
  }
  console.log(localVar); // ‚úÖ OK
  localFunc();           // ‚úÖ OK
}
testLocalScope();
// console.log(localVar);  // ‚ùå Kh√¥ng truy c·∫≠p ƒë∆∞·ª£c bi·∫øn trong h√†m

// 4. Khi g·ªçi h√†m s·∫Ω t·∫°o ra m·ªôt ph·∫°m vi m·ªõi
function outerFunc() {
  let outer = "üî≤ Outer Scope";
  function innerFunc() {
    let inner = "üî≥ Inner Scope";
    console.log(outer); // ‚úÖ C√≥ th·ªÉ truy c·∫≠p bi·∫øn c·ªßa outer
    console.log(inner); // ‚úÖ Bi·∫øn n·ªôi b·ªô
  }
  innerFunc();
  // console.log(inner); // ‚ùå Kh√¥ng th·ªÉ truy c·∫≠p bi·∫øn inner t·ª´ b√™n ngo√†i
}
outerFunc();

// 5. Lexical Scope ‚Äì H√†m c√≥ th·ªÉ truy c·∫≠p bi·∫øn c·ªßa c·∫•p ngo√†i n√≥
let scopeVar = "üîó Global";

function levelOne() {
  let levelOneVar = "üîó Level 1";

  function levelTwo() {
    let levelTwoVar = "üîó Level 2";
    console.log(scopeVar);      // ‚úÖ Global
    console.log(levelOneVar);   // ‚úÖ Level 1
    console.log(levelTwoVar);   // ‚úÖ Level 2
  }

  levelTwo();
}
levelOne();

// 6. C√°ch th·ª©c truy c·∫≠p bi·∫øn ‚Äì theo chu·ªói ph·∫°m vi (Scope Chain)
let a = "A";
function f1() {
  let b = "B";
  function f2() {
    let c = "C";
    console.log(a, b, c); // ‚úÖ Truy c·∫≠p bi·∫øn t·ª´ trong ra ngo√†i: C -> B -> A
  }
  f2();
}
f1();

// 7. Khi n√†o bi·∫øn b·ªã x√≥a kh·ªèi b·ªô nh·ªõ?

// 7.1. Bi·∫øn to√†n c·ª•c => s·ªëng ƒë·∫øn khi reload ho·∫∑c tab b·ªã ƒë√≥ng
let globalMemoryVar = "üß† Global memory";

// 7.2. Bi·∫øn trong h√†m => s·∫Ω b·ªã x√≥a sau khi h√†m k·∫øt th√∫c
function tempMemory() {
  let temp = "üß† Temp inside function";
}
tempMemory();
// Sau khi ch·∫°y xong, bi·∫øn `temp` s·∫Ω b·ªã thu gom r√°c (GC)

// 7.3. Bi·∫øn trong h√†m nh∆∞ng ƒë∆∞·ª£c gi·ªØ b·ªüi closure => kh√¥ng b·ªã x√≥a
function memoryClosure() {
  let retained = "üß† I am retained by closure";
  return function accessRetained() {
    console.log(retained); // v·∫´n c√≤n t·ªìn t·∫°i trong b·ªô nh·ªõ
  };
}
const keepAlive = memoryClosure();
keepAlive(); // => üß† I am retained by closure

// V√¨ `accessRetained` v·∫´n gi·ªØ reference ƒë·∫øn `retained` n√™n bi·∫øn n√†y kh√¥ng b·ªã GC


// ===========================================
// T·ª´ kh√≥a `this` trong JavaScript
// ===========================================
// `this` d√πng ƒë·ªÉ tham chi·∫øu ƒë·∫øn ƒë·ªëi t∆∞·ª£ng m√† n√≥ thu·ªôc v·ªÅ.
// ƒê·∫∑c t√≠nh
// - **Trong ph∆∞∆°ng th·ª©c:** `this` tham chi·∫øu ƒë·ªëi t∆∞·ª£ng g·ªçi ph∆∞∆°ng th·ª©c.
// - **Ngo√†i ph∆∞∆°ng th·ª©c:** `this` tham chi·∫øu ƒë·ªëi t∆∞·ª£ng global (window trong tr√¨nh duy·ªát)
// - ·ªû **strict mode**, `this` trong h√†m th∆∞·ªùng l√† `undefined`.


// ===========================================
// use strict
// ===========================================

// L·ªói: g√°n gi√° tr·ªã cho thu·ªôc t√≠nh kh√¥ng writable
const obj = {};
Object.defineProperty(obj, "x", { value: 42, writable: false });
obj.x = 9; // Error

// L·ªói: tr√πng t√™n tham s·ªë
function example(a, a) { // Error
  return a + a;
}

// H√†m ch·ªâ t·ªìn t·∫°i trong block
{
  function blockFunc() {
    console.log('Inside block');
  }
}
blockFunc(); // Error n·∫øu g·ªçi ngo√†i block

// L·ªói: d√πng t·ª´ kh√≥a b·ªã c·∫•m
let private = 1; // Error

// L·ªói: g√°n bi·∫øn ch∆∞a khai b√°o
x = 3; // Error

// ------------------------------------------------------

// ECMAScript 6 (ES6 - 2015)

// 1. let v√† const: khai b√°o bi·∫øn block-scoped
let a = 10;
const b = 20;

// 2. Arrow functions: c√°ch vi·∫øt h√†m ng·∫Øn g·ªçn
const sum = (x, y) => x + y;

// 3. Template literals: chu·ªói c√≥ th·ªÉ ch√®n bi·∫øn
const name = 'Alice';
console.log(`Hello, ${name}!`);

// 4. Destructuring: ph√¢n r√£ object ho·∫∑c array
const user = { id: 1, username: 'bob' };
const { id, username } = user;

const numbers = [1, 2, 3];
const [first, second] = numbers;

// 5. Default parameters: tham s·ªë m·∫∑c ƒë·ªãnh cho h√†m
function greet(name = 'Guest') {
    console.log(`Hello, ${name}`);
}

// 6. Classes: c√∫ ph√°p class (OOP)
class Animal {
    constructor(name) {
        this.name = name;
    }
    speak() {
        console.log(`${this.name} makes a noise.`);
    }
}

// 7. Modules: import v√† export
// export: trong file a.js
// export const PI = 3.14;
// import: trong file b.js
// import { PI } from './a.js';

// 8. Promises: x·ª≠ l√Ω b·∫•t ƒë·ªìng b·ªô
const promise = new Promise((resolve, reject) => {
    let success = true;
    if (success) {
        resolve('Success!');
    } else {
        reject('Failure!');
    }
});

promise.then(result => console.log(result)).catch(error => console.log(error));

//-------------------------------------------------------------

// ECMAScript 2016 (ES7)

// 1. Array.prototype.includes: ki·ªÉm tra ph·∫ßn t·ª≠ trong m·∫£ng
const fruits = ['apple', 'banana', 'mango'];
console.log(fruits.includes('banana')); // true

// 2. Exponentiation operator (**): to√°n t·ª≠ l≈©y th·ª´a
console.log(2 ** 3); // 8

//-------------------------------------------------------------

// ECMAScript 2017 (ES8)

// 1. async/await: c√∫ ph√°p b·∫•t ƒë·ªìng b·ªô d·ªÖ ƒë·ªçc h∆°n
async function fetchData() {
    return 'Data fetched';
}

async function getData() {
    const result = await fetchData();
    console.log(result);
}
getData();

// 2. Object.values() v√† Object.entries()
const person = { name: 'John', age: 30 };
console.log(Object.values(person)); // ['John', 30]
console.log(Object.entries(person)); // [['name', 'John'], ['age', 30]]

// 3. String padding: padStart v√† padEnd
console.log('5'.padStart(3, '0')); // '005'
console.log('5'.padEnd(3, '0')); // '500'
