// Encapsulation: b·∫£o m·∫≠t, an to√†n th√¥ng tin

// üî∏ Class Cha
class Person {
  private ssn: string; // ch·ªâ d√πng ƒë∆∞·ª£c trong class Person
  protected name: string; // d√πng ƒë∆∞·ª£c trong Person v√† c√°c class con
  public age: number; // ai c≈©ng truy c·∫≠p ƒë∆∞·ª£c

  constructor(name: string, age: number, ssn: string) {
    this.name = name;
    this.age = age;
    this.ssn = ssn;
  }

  public getSSN(): string {
    return this.ssn;
  }

  public getInfo(): string {
    return `T√™n: ${this.name}, Tu·ªïi: ${this.age}`;
  }
}

// üîπ Class Con k·∫ø th·ª´a t·ª´ Person
class Student extends Person {
  private grade: number;

  constructor(name: string, age: number, ssn: string, grade: number) {
    super(name, age, ssn); // g·ªçi constructor c·ªßa class cha
    this.grade = grade;
  }

  public showStudentInfo(): void {
    // console.log(this.ssn); ‚ùå Kh√¥ng truy c·∫≠p ƒë∆∞·ª£c (private)
    console.log(`H·ªç t√™n: ${this.name}`);     // ‚úÖ ƒê∆∞·ª£c (protected)
    console.log(`Tu·ªïi: ${this.age}`);        // ‚úÖ ƒê∆∞·ª£c (public)
    console.log(`ƒêi·ªÉm: ${this.grade}`);      // ‚úÖ ƒê∆∞·ª£c (private trong class n√†y)
  }
}



// inheritance: t·ªëi ∆∞u m√£ ngu·ªìn
// üîπ Interface ƒë·ªãnh nghƒ©a m·ªôt h√†nh vi
interface Workable {
  work(): void;
}

// üî∏ Class Cha
class Person {
  protected name: string;
  protected age: number;

  constructor(name: string, age: number) {
    this.name = name;
    this.age = age;
  }

  introduce(): void {
    console.log(`T√¥i t√™n l√† ${this.name}, nƒÉm nay ${this.age} tu·ªïi.`);
  }
}

// üî∏ Class Con k·∫ø th·ª´a Person v√† implement Workable
class Developer extends Person implements Workable {
  private language: string;

  constructor(name: string, age: number, language: string) {
    super(name, age); // g·ªçi constructor class cha
    this.language = language;
  }

  // override t·ª´ interface Workable
  work(): void {
    console.log(`${this.name} ƒëang l·∫≠p tr√¨nh b·∫±ng ${this.language}.`);
  }

  // override method t·ª´ class cha
  override introduce(): void {
    super.introduce(); // g·ªçi l·∫°i introduce c·ªßa cha
    console.log(`T√¥i l√† l·∫≠p tr√¨nh vi√™n, s·ª≠ d·ª•ng ng√¥n ng·ªØ ${this.language}.`);
  }
}

// üî∏ S·ª≠ d·ª•ng
const dev = new Developer("Nam", 25, "TypeScript");

dev.introduce();  // G·ªçi method k·∫ø th·ª´a v√† ghi ƒë√®
dev.work();       // G·ªçi method t·ª´ interface



// Polymorphism: 1 vi·ªác c√≥ th·ªÉ ƒë∆∞·ª£c th·ªÉ hi·ªán d∆∞·ªõi nhi·ªÅu h√¨nh dang.
// Abstraction: ·∫®n ƒëi nh·ªØng chi ti·∫øt ph·ª©c t·∫°p, ch·ªâ l·ªô ra c√°c th√¥ng tin c·∫ßn thi·∫øt, th∆∞·ªùng s·ª≠ d·ª•ng abstract class ho·∫∑c interface.
// 2 t√≠nh ch·∫≠t n√†y th∆∞·ªùng ƒë∆∞·ª£c k·∫øt h·ª£p v·ªõi nhau ƒë·ªÉ mang l·∫°i l·ª£i √≠ch d·ªÖ d√†ng thay th·∫ø s·ª≠a ƒë·ªïi, b·ªï sung.
// üîπ Interface Workable ƒë·ªãnh nghƒ©a h√†nh vi "work"
interface Workable {
  work(): void;
  attendMeeting(): void;
}

// üîπ Interface ProjectManager ƒë·ªãnh nghƒ©a h√†nh vi qu·∫£n l√Ω d·ª± √°n
interface ProjectManager {
  manageProject(): void;
  assignTask(task: string): void;
}

// üîπ Interface TeamMember ƒë·ªãnh nghƒ©a h√†nh vi l√†m vi·ªác trong nh√≥m
interface TeamMember {
  developSoftware(): void;
  reportProgress(): void;
}

// üî∏ Abstract class Person ƒë·ªãnh nghƒ©a c√°c thu·ªôc t√≠nh chung cho m·ªçi ng∆∞·ªùi
abstract class Person {
  constructor(protected name: string, protected age: number) {}

  introduce(): void {
    console.log(`Xin ch√†o, t√¥i l√† ${this.name}, ${this.age} tu·ªïi.`);
  }

  abstract getRole(): string;  // Ph∆∞∆°ng th·ª©c tr·ª´u t∆∞·ª£ng, l·ªõp con s·∫Ω ghi ƒë√®
}

// üî∏ Class Employee k·∫ø th·ª´a Person v√† implements nhi·ªÅu interface
abstract class Employee extends Person implements Workable, ProjectManager, TeamMember {
  constructor(name: string, age: number, protected department: string) {
    super(name, age); // G·ªçi constructor c·ªßa l·ªõp cha
  }

  // Ph∆∞∆°ng th·ª©c ph·∫£i ƒë∆∞·ª£c tri·ªÉn khai t·ª´ Workable
  work(): void {
    console.log(`${this.name} ƒëang l√†m vi·ªác t·∫°i b·ªô ph·∫≠n ${this.department}.`);
  }

  attendMeeting(): void {
    console.log(`${this.name} ƒëang tham gia cu·ªôc h·ªçp b·ªô ph·∫≠n.`);
  }

  // Ph∆∞∆°ng th·ª©c t·ª´ ProjectManager
  manageProject(): void {
    console.log(`${this.name} ƒëang qu·∫£n l√Ω d·ª± √°n ${this.department}.`);
  }

  assignTask(task: string): void {
    console.log(`${this.name} ƒëang ph√¢n c√¥ng nhi·ªám v·ª•: ${task}`);
  }

  // Ph∆∞∆°ng th·ª©c t·ª´ TeamMember
  developSoftware(): void {
    console.log(`${this.name} ƒëang ph√°t tri·ªÉn ph·∫ßn m·ªÅm trong nh√≥m.`);
  }

  reportProgress(): void {
    console.log(`${this.name} ƒëang b√°o c√°o ti·∫øn ƒë·ªô d·ª± √°n.`);
  }

  abstract getRole(): string;  // Ph∆∞∆°ng th·ª©c tr·ª´u t∆∞·ª£ng, l·ªõp con s·∫Ω ghi ƒë√®
}

// üîπ L·ªõp Developer, k·∫ø th·ª´a Employee v√† implements th√™m c√°c h√†nh vi t·ª´ interface
class Developer extends Employee {
  constructor(name: string, age: number, department: string, private programmingLanguage: string) {
    super(name, age, department);
  }

  // Ghi ƒë√® getRole ƒë·ªÉ x√°c ƒë·ªãnh vai tr√≤ c·ª• th·ªÉ
  getRole(): string {
    return `Developer (${this.programmingLanguage})`;
  }

  // Ghi ƒë√® work() n·∫øu c·∫ßn
  work(): void {
    console.log(`${this.name} ƒëang ph√°t tri·ªÉn ph·∫ßn m·ªÅm v·ªõi ${this.programmingLanguage}.`);
  }
}

// üîπ L·ªõp Manager, k·∫ø th·ª´a Employee v√† implements th√™m c√°c h√†nh vi t·ª´ interface
class Manager extends Employee {
  constructor(name: string, age: number, department: string) {
    super(name, age, department);
  }

  getRole(): string {
    return 'Manager';
  }

  // Ghi ƒë√® work() ƒë·ªÉ ph·∫£n √°nh c√¥ng vi·ªác c·ª• th·ªÉ c·ªßa Manager
  work(): void {
    console.log(`${this.name} ƒëang qu·∫£n l√Ω nh√≥m ${this.department}.`);
  }
}

// üîπ L·ªõp Designer, k·∫ø th·ª´a Employee v√† implements th√™m c√°c h√†nh vi t·ª´ interface
class Designer extends Employee {
  constructor(name: string, age: number, department: string, private designTool: string) {
    super(name, age, department);
  }

  getRole(): string {
    return `Designer (using ${this.designTool})`;
  }

  // Ghi ƒë√® work() ƒë·ªÉ l√†m vi·ªác v·ªõi c√¥ng c·ª• thi·∫øt k·∫ø
  work(): void {
    console.log(`${this.name} ƒëang thi·∫øt k·∫ø giao di·ªán v·ªõi c√¥ng c·ª• ${this.designTool}.`);
  }
}


// t√≠nh linh ho·∫°t d·ªÖ thay th·∫ø, s·ª≠a ƒë·ªïi trong t√≠nh ƒëo h√¨nh
abstract class UIComponent {
  // Ph∆∞∆°ng th·ª©c tr·ª´u t∆∞·ª£ng, c√°c l·ªõp con ph·∫£i tri·ªÉn khai n√≥
  abstract render(): void;
}

class Button extends UIComponent {
  render(): void {
    console.log("Render a Button");
  }
}

class TextField extends UIComponent {
  render(): void {
    console.log("Render a TextField");
  }
}

class Checkbox extends UIComponent {
  render(): void {
    console.log("Render a Checkbox");
  }
}

function renderUIComponent(component: UIComponent) {
  component.render(); // ƒê√¢y l√† ƒëa h√¨nh, kh√¥ng quan t√¢m ƒë·∫øn lo·∫°i component c·ª• th·ªÉ
}

// T·∫°o c√°c ƒë·ªëi t∆∞·ª£ng c·ª• th·ªÉ
const button = new Button();
const textField = new TextField();
const checkbox = new Checkbox();

// G·ªçi ph∆∞∆°ng th·ª©c render() m√† kh√¥ng c·∫ßn quan t√¢m ƒë·∫øn lo·∫°i th√†nh ph·∫ßn
renderUIComponent(button); // Render a Button
renderUIComponent(textField); // Render a TextField
renderUIComponent(checkbox); // Render a Checkbox


// Bi·∫øn v√† h√†m class
// Bi·∫øn class (static property): S·ª≠ d·ª•ng khi b·∫°n c·∫ßn l∆∞u tr·ªØ gi√° tr·ªã chung cho t·∫•t c·∫£ c√°c ƒë·ªëi t∆∞·ª£ng c·ªßa class, kh√¥ng thay ƒë·ªïi theo t·ª´ng ƒë·ªëi t∆∞·ª£ng ri√™ng bi·ªát.
// H√†m class (static method): S·ª≠ d·ª•ng khi b·∫°n c·∫ßn m·ªôt ph∆∞∆°ng th·ª©c c√≥ th·ªÉ ƒë∆∞·ª£c g·ªçi m√† kh√¥ng c·∫ßn ph·∫£i t·∫°o ƒë·ªëi t∆∞·ª£ng, v√† ph∆∞∆°ng th·ª©c n√†y kh√¥ng c·∫ßn truy c·∫≠p ƒë·∫øn tr·∫°ng th√°i c·ªßa c√°c ƒë·ªëi t∆∞·ª£ng (c√≥ th·ªÉ ch·ªâ l√†m vi·ªác v·ªõi d·ªØ li·ªáu to√†n c·ª•c c·ªßa class). h√†m khi kh√¥ng c·∫ßn ph·ª• thu·ªôc v√†o thu·ªôc t√≠nh c·ªßa t·ª´ng ƒë·ªëi t∆∞·ª£ng c·ª• th·ªÉ th√¨ n√™n ƒë·ªÉ l√†m h√†m class gi√∫p gi·∫£m b·ªô nh·ªõ.
class Counter {
  // Bi·∫øn class (static variable) d√πng ƒë·ªÉ l∆∞u tr·ªØ s·ªë ƒë·∫øm
  private static count: number = 0;

  // H√†m class (static method) ƒë·ªÉ tƒÉng gi√° tr·ªã c·ªßa bi·∫øn class count
  public static incrementCount(): void {
    Counter.count += 1; // TƒÉng bi·∫øn count l√™n 1
    console.log(`Count: ${Counter.count}`);
  }

  // H√†m class (static method) kh√¥ng ph·ª• thu·ªôc v√†o thu·ªôc t√≠nh c·ªßa ƒë·ªëi t∆∞·ª£ng c·ª• th·ªÉ
  // H√†m n√†y d√πng ƒë·ªÉ t√≠nh t·ªïng c√°c s·ªë trong m·∫£ng m√† kh√¥ng c·∫ßn ƒë·ªëi t∆∞·ª£ng
  public static sumArray(arr: number[]): number {
    return arr.reduce((total, num) => total + num, 0);
  }

  // H√†m ƒë·ªëi t∆∞·ª£ng (instance method) ƒë·ªÉ l·∫•y gi√° tr·ªã c·ªßa bi·∫øn count
  public getCount(): number {
    return Counter.count; // Tr·∫£ v·ªÅ gi√° tr·ªã hi·ªán t·∫°i c·ªßa count
  }
}


// √©p ki·ªÉu ( ch√∫ng ta ch·ªâ c√≥ th·ªÉ √©p ki·ªÉu t·ª´ vd: dog -> animal , c√≤n n·∫øu ch√∫ng ta √©p ki·ªÉu t·ª´ animal -> dog th√¨ ch·ªâ c√≥ th·ªÉ th·ª±c hi·ªán khi ch√≠nh animal ƒë√≥ ƒë√£ p·∫£i l√† dog r·ªìi)
class Animal {
  name: string;

  constructor(name: string) {
    this.name = name;
  }

  speak() {
    console.log(`${this.name} makes a sound`);
  }
}

class Dog extends Animal {
  breed: string;

  constructor(name: string, breed: string) {
    super(name);
    this.breed = breed;
  }

  speak() {
    console.log(`${this.name} barks`);
  }

  fetch() {
    console.log(`${this.name} is fetching a ball`);
  }
}

// Upcasting (√©p ki·ªÉu t·ª´ Dog -> Animal)
const dog: Dog = new Dog("Buddy", "Golden Retriever");
const animal: Animal = dog; // H·ª£p l·ªá, dog l√† ki·ªÉu con c·ªßa Animal
animal.speak(); // In ra: Buddy barks

// Downcasting (√©p ki·ªÉu t·ª´ Animal -> Dog) - Kh√¥ng an to√†n n·∫øu kh√¥ng ki·ªÉm tra
const someAnimal: Animal = new Animal("Generic Animal");
const someDog: Dog = someAnimal as Dog; // ƒê√¢y l√† √©p ki·ªÉu kh√¥ng an to√†n, c√≥ th·ªÉ g√¢y l·ªói n·∫øu kh√¥ng ki·ªÉm tra

// Ki·ªÉm tra an to√†n tr∆∞·ªõc khi √©p ki·ªÉu
if (someAnimal instanceof Dog) {
  const doggie = someAnimal as Dog;
  doggie.fetch(); // In ra: Generic Animal is fetching a ball
} else {
  console.log("someAnimal is not a Dog"); // In ra: someAnimal is not a Dog
}
